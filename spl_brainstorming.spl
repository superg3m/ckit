// =================== C_Versions (valid spl) ===================
typedef struct CKIT_Node {
    struct CKIT_Node* next;
    struct CKIT_Node* prev;
    size_t element_size_in_bytes;
    void* data;
} CKIT_Node;
CKIT_Node* ckit_node_create(CKIT_LinkedList* linked_list, void* data)

typedef struct CKIT_LinkedList {
    CKIT_Node* head;
    CKIT_Node* tail;
    size_t element_size_in_bytes;
    u32 count;
    Boolean is_pointer_type;
} CKIT_LinkedList;
CKIT_LinkedList* ckit_linked_list_create(size_t element_size_in_bytes, Boolean is_pointer_type);

u32 casting_reqruied = *((u32*)ckit_node_get(test_node));
// ==================================================================================================

// =================== SPL_Version (not valid C | but can be transpliled into C) ===================
typedef struct CKIT_Node<$DataType> {
    struct CKIT_Node* next;
    struct CKIT_Node* prev;
    size_t element_size_in_bytes = sizeof(DataType);
    DataType data;
} CKIT_Node;
CKIT_Node* ckit_node_create(CKIT_LinkedList* linked_list, void* data)

typedef struct CKIT_LinkedList<$DataType> {
    CKIT_Node* head;
    CKIT_Node* tail;
    size_t element_size_in_bytes;
    u32 count;
    Boolean is_pointer_type = is_poineter(DataType); // builtin is_pointer compiler intrinsic
} CKIT_LinkedList;
CKIT_LinkedList* ckit_linked_list_create(size_t element_size_in_bytes, Boolean is_pointer_type);

CKIT_Node<u32> test_node = ckit_node_create() // This will do type inference based on the left side type
u32 no_casting_required = ckit_node_get(test_node); // and you the way you ahve to implement these things will be significantly easier
// ==================================================================================================