# -------------------------------- GENERATED BY C_BUILD --------------------------------
import os
import sys

def FIND_C_BUILD(current_dir):
    if os.path.isdir(os.path.join(current_dir, "c_build")):
        sys.path.insert(0, current_dir)
        return

    parent_dir = os.path.dirname(current_dir)
    if parent_dir != current_dir:
        FIND_C_BUILD(parent_dir)

FIND_C_BUILD(os.path.abspath(os.path.dirname(__file__)))
from c_build.source.UserUtilities import *
from c_build.source.Manager import *
# --------------------------------------------------------------------------------------s

pc: ProjectConfig = ProjectConfig(
    project_name = "ckit",
    project_dependencies = [        
        Dependency(
            name="ckg",
            branch_name="CompleteRewrite",
        ),
    ],
    project_debug_with_visual_studio = False,
    project_rebuild_project_dependencies = True,
    project_executable_names = ["ckit_test.exe"]
)

cc: CompilerConfig = CompilerConfig(
    compiler_name = C_BUILD_COMPILER_NAME() if C_BUILD_IS_DEPENDENCY() else "INVALID_COMPILER",
    compiler_disable_sanitizer=True
)

if IS_WINDOWS() and not C_BUILD_IS_DEPENDENCY():
    cc.compiler_name = "cl"
if IS_DARWIN() and not C_BUILD_IS_DEPENDENCY():
    cc.compiler_name = "clang"
elif IS_LINUX() and not C_BUILD_IS_DEPENDENCY():
    cc.compiler_name = "gcc"

# Do different things depending on the platform
if cc.compiler_name == "cl":
	cc.compiler_warning_level = "4"
	cc.compiler_disable_specific_warnings = ["5105", "4668", "4820", "4996", "4189"]
else:
	cc.compiler_warning_level = "all"
	cc.compiler_disable_specific_warnings = ["deprecated", "parentheses"]

build_postfix = f"build_{cc.compiler_name}/{C_BUILD_BUILD_TYPE()}"
executable_procedure_libs = [f"../../../{build_postfix}/{GET_LIB_NAME(cc, 'ckit')}"]
if IS_WINDOWS():
    windows_libs = [GET_LIB_FLAG(cc, "User32"), GET_LIB_FLAG(cc, "Gdi32")]
    executable_procedure_libs += windows_libs
    

procedures: Dict[str, ProcedureConfig] = {
    "ckit_lib": ProcedureConfig(
        build_directory = f"./{build_postfix}",
        output_name = GET_LIB_NAME(cc, 'ckit'),
        source_files = ["../../ckg/ckg.c", "../../ckit.c"],
        compile_time_defines = ["CKIT_WSL"],
    ),

    "ckit_core_test": ProcedureConfig(
        build_directory = f"./Tests/{build_postfix}",
        output_name = "ckit_test.exe",
        source_files = ["../../*.c"],
        additional_libs = executable_procedure_libs,
        compile_time_defines = ["CKIT_WSL"],
    ),
}

manager: Manager = Manager(cc, pc, procedures)
manager.build_project()
# -------------------------------------------------------------------------------------